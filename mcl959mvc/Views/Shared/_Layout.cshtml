@using System.Text.Json
@{
    // Safely handle possible nulls in ModelState
    var modelState = ViewData.ModelState ?? new Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary();
    var errorDict = modelState
        .Where(x => x.Value != null && x.Value.Errors.Any())
        .ToDictionary(
            x => x.Key,
            x => x.Value!.Errors.Select(e => e.ErrorMessage).ToList()
        );

    // Compose the popup message if there are errors
    var popupMessage = TempData["PopupMessage"] as string;
    if (errorDict.Count > 0)
    {
        var allErrors = string.Join("<br/>", errorDict.SelectMany(kvp => kvp.Value));
        if (!string.IsNullOrEmpty(popupMessage))
        {
            popupMessage += "<hr/>" + allErrors;
        }
        else
        {
            popupMessage = allErrors;
        }
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>mcl959 @ViewData["Title"]</title>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/mcl959.css" asp-append-version="true" />
</head>
<body>
    <header>
        @{
            string currentController = ViewContext.RouteData.Values["controller"]?.ToString() ?? "";
            string currentAction = ViewContext.RouteData.Values["action"]?.ToString() ?? "";
        }
        <div class="logo desktop-logo"></div>
        <div class="head">
            <h1 style="z-index: 3;">
                Marine Corps League<br />
                Longview Detachment 959<br />
                1512 Alpine Rd, Longview, TX 75601
            </h1>
        </div>
        <div class="login">@await Html.PartialAsync("_LoginPartial")</div>
        <div class="navbar navbar-expand-lg navbar-light bg-light">
            <div class="container-fluid">
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav">
                        <li id="miHome" class="nav-item @(currentController == "Home" && currentAction != "About" ? "selected" : "")">
                            <a class="nav-link" asp-controller="Home" asp-action="Index">MCL959</a>
                        </li>
                        <li id="miEvent" class="nav-item @(currentController == "Events" ? "selected" : "")">
                            <a class="nav-link" asp-controller="Events" asp-action="Index">Events</a>
                        </li>
                        <li id="miMember" class="nav-item @(currentController == "Roster" ? "selected" : "")">
                            <a class="nav-link" asp-controller="Roster" asp-action="Index">Members</a>
                        </li>
                        <li id="miAbout" class="nav-item @(currentController == "Home" && currentAction == "About" ? "selected" : "")">
                            <a class="nav-link" asp-controller="Home" asp-action="About">About</a>
                        </li>
                        <li id="miContact" class="nav-item @(currentController == "Messages" ? "selected" : "")">
                            <a class="nav-link" asp-controller="Messages" asp-action="Index">Contact</a>
                        </li>
                        <!-- Add more controllers/actions as needed -->
                    </ul>
                </div>
            </div>
        </div>
    </header>
    <div class="main-content">
        <div class="container">
            <main role="main">
                @RenderBody()
            </main>
            @if (!string.IsNullOrEmpty(popupMessage))
            {
                <div id="popupMessage" class="alert alert-info alert-dismissible fade center-popup" role="alert">
                    @Html.Raw(popupMessage)
                    <button id="popupCloseBtn" type="button" class="btn-close" aria-label="Close"></button>
                </div>
            }
        </div>
    </div>
    <div class="logo mobile-logo"></div>
    <footer class="border-top footer text-muted">
        <div class="container">
            Find and like us on Facebook at <a href="https://www.facebook.com/mcl959">Facebook.com/mcl959</a><br />
            &copy; 2025 - mcl959mvc - <a asp-area="" asp-controller="Home" asp-action="About">About</a>
            <div id="showPopupDiv">
                <a href="#" id="showPopupLink">View last Message</a>
            </div><br />
        </div>
    </footer>
    @await RenderSectionAsync("Scripts", required: false)
    <script>
        console.log("SCRIPT LOADED");
        document.addEventListener("DOMContentLoaded", function () {
            console.log("DOM fully loaded and parsed");
            var popup = document.getElementById('popupMessage');
            var closeButton = document.getElementById('popupCloseBtn');
            var showPopupLink = document.getElementById('showPopupLink');
            var popupTimeout;

            console.log('popup:', popup);
            console.log('closeButton:', closeButton);
            console.log('showPopupLink:', showPopupLink);

            if (popup) {
                setTimeout(function () {
                    console.log('Showing popup');
                    popup.classList.add('show');
                }, 10);
            }

            if (closeButton && popup) {
                closeButton.addEventListener('click', function (event) {
                    console.log('Closing popup');
                    event.preventDefault();
                    popup.classList.remove('show');
                    clearTimeout(popupTimeout);
                });
            }

            if (showPopupLink && popup) {
                showPopupLink.addEventListener('click', function (event) {
                    console.log('Show last message clicked');
                    event.preventDefault();
                    popup.classList.add('show');
                    clearTimeout(popupTimeout);
                    popupTimeout = setTimeout(function () {
                        popup.classList.remove('show');
                    }, 20000);
                });
            }
        });
    </script>
    </body>
</html>